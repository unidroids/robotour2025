import serial
import threading
import time

SERIAL_PORT = '/dev/howerboard'
SERIAL_BAUD = 115200

serial_lock = threading.Lock()
serial_conn = None

# --- Stav ≈ô√°dkov√©ho readeru (low-latency) ---
_reader_thread = None
_reader_stop = threading.Event()
_line_handler = None


def open_serial():
    """Otev≈ôe s√©riov√Ω port a po≈°le hlaviƒçku (13). Non-blocking read pro n√≠zkou latenci."""
    global serial_conn
    if serial_conn is None or not serial_conn.is_open:
        serial_conn = serial.Serial(
            port=SERIAL_PORT,
            baudrate=SERIAL_BAUD,
            timeout=0,       # ‚ö° neblokuj√≠c√≠ ƒçten√≠ (latence ~1 ms ve smyƒçce)
            write_timeout=0, # neblokuj√≠c√≠ z√°pis
            dsrdtr=False,
            rtscts=False
        )
        serial_conn.setDTR(False)
        serial_conn.setRTS(False)
        print(f"Serial otev≈ôen na {SERIAL_PORT}")

        # Po otev≈ôen√≠ po≈°li hlaviƒçku (bajt 13)
        with serial_lock:
            serial_conn.write(bytes([13]))
        print("Odesl√°na hlaviƒçka (13)")
    else:
        print("Serial u≈æ je otev≈ôen√Ω.")


def close_serial():
    """Po≈°le ukonƒçovac√≠ bajt (27) a korektnƒõ zav≈ôe port."""
    global serial_conn
    if serial_conn and serial_conn.is_open:
        try:
            with serial_lock:
                serial_conn.write(bytes([27]))
            print("Odesl√°n ukonƒçovac√≠ bajt (27)")
        except Exception:
            pass
        try:
            serial_conn.close()
        finally:
            print("Serial uzav≈ôen.")
    else:
        print("Serial nen√≠ otev≈ôen.")


def send_serial(data: bytes):
    """Bezpeƒçn√Ω z√°pis na s√©riov√Ω port (chr√°nƒõno z√°mkem)."""
    global serial_conn
    with serial_lock:
        if serial_conn and serial_conn.is_open:
            serial_conn.write(data)
            print(f"Odesl√°no na serial: {data.hex()}")
        else:
            print("Serial nen√≠ otev≈ôen.")


# =========================
#   ≈ò√ÅDKOV√ù READER (10 Hz)
# =========================

def _reader_loop():
    """
    Low-latency ƒçten√≠:
    - neblokuj√≠c√≠ port (timeout=0)
    - ƒçteme okam≈æitƒõ, co je k dispozici (in_waiting)
    - jakmile doraz√≠ '\\n', ihned vol√°me _line_handler(text)
    """
    global serial_conn, _line_handler
    buf = bytearray()

    while not _reader_stop.is_set():
        try:
            with serial_lock:
                s = serial_conn

            if not s or not s.is_open:
                time.sleep(0.02)
                continue

            n = s.in_waiting
            if n:
                chunk = s.read(n)  # vr√°t√≠ hned, co je v ingress bufferu
                if chunk:
                    buf.extend(chunk)
                    # Zpracuj v≈°echny kompletn√≠ ≈ô√°dky
                    while True:
                        nl_idx = buf.find(b'\n')
                        if nl_idx < 0:
                            break
                        raw = buf[:nl_idx]              # bez \n
                        del buf[:nl_idx+1]              # odstra≈à vƒç. \n
                        text = raw.decode('ascii', errors='ignore').strip('\r')
                        if text and _line_handler:
                            try:
                                _line_handler(text)
                            except Exception as e:
                                print(f"Chyba v on_line handleru: {e}")
            else:
                # mal√Ω sp√°nek pro n√≠zk√© CPU a ~1ms latenci
                time.sleep(0.001)

        except Exception as e:
            print(f"Serial reader chyba: {e}")
            time.sleep(0.01)


def start_serial_reader(on_line):
    """Spust√≠ vl√°kno, kter√© ƒçte ≈ô√°dky ze s√©riovky a vol√° on_line(str). Idempotentn√≠."""
    global _reader_thread, _line_handler
    _line_handler = on_line
    if _reader_thread and _reader_thread.is_alive():
        return
    _reader_stop.clear()
    _reader_thread = threading.Thread(target=_reader_loop, name="serial-reader", daemon=True)
    _reader_thread.start()
    print("üì° Serial reader spu≈°tƒõn.")


def stop_serial_reader():
    """Po≈æ√°d√° reader o ukonƒçen√≠; skonƒç√≠ do ~1 ms (neblokuj√≠c√≠ read)."""
    global _reader_thread
    if _reader_thread and _reader_thread.is_alive():
        _reader_stop.set()
        print("üì¥ Serial reader stop po≈æadavek.")
